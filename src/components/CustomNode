import React, { memo } from 'react';
import { Handle, Position, NodeProps } from '@xyflow/react';
import { Circle, Grip } from 'lucide-react';

const CustomNode: React.FC<NodeProps> = ({ data, selected, dragging }) => {
  return (
    <div className={`relative bg-gradient-to-br from-gray-800 to-gray-900 border-2 rounded-xl p-4 shadow-xl transition-all duration-200 min-w-[180px] ${
      selected 
        ? 'border-blue-500 ring-2 ring-blue-500/30 shadow-blue-500/20' 
        : 'border-gray-600 hover:border-gray-500 hover:shadow-lg'
    } ${dragging ? 'rotate-1 scale-105' : ''}`}>
      
      {/* LEFT HANDLE - TARGET (GREEN) */}
      <Handle
        type="target"
        position={Position.Left}
        className="!w-6 !h-6 !bg-green-500 !border-4 !border-green-300 hover:!bg-green-400 hover:!scale-125 transition-all duration-200 !shadow-lg !rounded-full !cursor-crosshair"
        style={{ 
          left: -12,
          top: '50%',
          transform: 'translateY(-50%)',
          zIndex: 1000
        }}
        isConnectable={true}
      />
      
      <div className="flex items-center justify-center space-x-3 relative">
        <div className="flex items-center space-x-2">
          <Circle size={16} className="text-blue-400 flex-shrink-0" />
          <span className="text-white font-medium text-sm truncate max-w-[120px]" title={data.label}>
            {data.label}
          </span>
        </div>
        {selected && (
          <Grip size={14} className="text-gray-400 flex-shrink-0" />
        )}
      </div>
      
      {/* RIGHT HANDLE - SOURCE (RED) */}
      <Handle
        type="source"
        position={Position.Right}
        className="!w-6 !h-6 !bg-red-500 !border-4 !border-red-300 hover:!bg-red-400 hover:!scale-125 transition-all duration-200 !shadow-lg !rounded-full !cursor-crosshair"
        style={{ 
          right: -12,
          top: '50%',
          transform: 'translateY(-50%)',
          zIndex: 1000
        }}
        isConnectable={true}
      />

      {/* NODE TYPE INDICATOR */}
      <div className="absolute -top-1 -right-1 w-3 h-3 bg-blue-500 rounded-full border-2 border-gray-800"></div>
      
      {/* DEBUG INFO WHEN SELECTED */}
      {selected && (
        <div className="absolute -bottom-10 left-1/2 transform -translate-x-1/2">
          <div className="bg-gray-700 text-white text-xs px-3 py-1 rounded-full whitespace-nowrap">
            üü¢ Target ‚Üê | ‚Üí üî¥ Source
          </div>
        </div>
      )}
    </div>
  );
};

export default memo(CustomNode);
